{"version":3,"sources":["components/TaskCard.js","components/AddNewTaskForm.js","components/TaskItems.js","components/KanbanBoard.js","App.js","serviceWorker.js","index.js"],"names":["TaskCard","props","className","draggable","id","timeId","onDragStart","class","taskTitle","taskDescription","AddNewTaskForm","state","editing","event","preventDefault","newCardArray","this","textInput","value","trim","split","listNumber","formNum","onAdd","setState","onSubmit","e","type","ref","input","aria-label","placeholder","onClick","setEditing","Component","TaskItems","cards","map","card","index","key","title","onDragOver","onDrop","Board","fromList","dragInfo","taskId","currentTarget","localStorage","setItem","JSON","stringify","listNum","droppedTask","getItem","localStorageList","parsedList","parse","parsedDragInfo","cardsArray","taskCard","find","indexOfCard","findIndex","splice","push","parseInt","taskItems","console","log","updatedTaskItems","Object","keys","forEach","updateTaskItems","newTaskCard","Date","valueOf","taskItem","addTaskCard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sVAEe,SAASA,EAASC,GAC/B,OACE,yBACEC,UAAU,YACVC,UAAU,OACVC,GAAI,CAACH,EAAMI,QACXC,YAAaL,EAAMK,aAEnB,0BAAMJ,UAAU,gBACb,IACD,uBAAGK,MAAM,sBAFX,gBAEuC,KAEvC,uBAAGL,UAAU,iBACVD,EAAMO,UADT,KAGA,+BAAKP,EAAMQ,gBAAX,M,UCfeC,E,kDACnB,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXC,SAAS,GAHM,E,qDAOVC,GACPA,EAAMC,iBACN,IACMC,EADUC,KAAKC,UAAUC,MAAMC,OACRC,MAAM,KAC7BZ,EAAYO,EAAa,GACzBN,EAAkBM,EAAa,GAC/BM,EAAaL,KAAKf,MAAMqB,QAC1Bb,GAAmBO,KAAKf,MAAMsB,OAChCP,KAAKf,MAAMsB,MAAMf,EAAWC,EAAiBY,GAE/CL,KAAKC,UAAUC,MAAQ,K,iCAGdN,GACTI,KAAKQ,SAAS,CACZZ,c,+BAIM,IAAD,OACP,OAAKI,KAAKL,MAAMC,QAQd,0BAAMV,UAAU,qBAAqBuB,SAAU,SAACC,GAAD,OAAO,EAAKD,SAASC,KAClE,2BACEC,KAAK,OACLzB,UAAU,aACV0B,IAAK,SAACC,GAAD,OAAY,EAAKZ,UAAYY,GAClCC,aAAW,aACXC,YAAY,gCAEd,6BACE,4BAAQ7B,UAAU,qBAAlB,YACA,4BACEA,UAAU,uBACV8B,QAAS,kBAAM,EAAKC,YAAW,KAFjC,YAhBF,yBAAK/B,UAAU,kBAAkB8B,QAAS,kBAAM,EAAKC,YAAW,KAC9D,yBAAK/B,UAAU,cAAf,U,GA/BkCgC,aCGvBC,E,kDACnB,WAAYlC,GAAQ,uCACZA,G,qDAGE,IAAD,OACDmC,EAAQpB,KAAKf,MAAMmC,MAAMC,KAAI,SAACC,EAAMC,GACxC,OACE,wBAAIC,IAAKD,GACP,kBAACvC,EAAD,iBAAcsC,EAAd,CAAoBhC,YAAa,EAAKL,MAAMK,mBAKlD,OACE,6BACE,wBAAIJ,UAAS,mCAA8Bc,KAAKf,MAAMG,KACnDY,KAAKf,MAAMwC,OAEd,wBACEvC,UAAU,YACVwC,WAAY1B,KAAKf,MAAMyC,WACvBC,OAAQ3B,KAAKf,MAAM0C,QAElBP,EACD,4BACE,kBAAC,EAAD,CAAgBd,QAASN,KAAKf,MAAMG,GAAImB,MAAOP,KAAKf,MAAMsB,e,GA1B/BW,aCDlBU,E,kDACnB,WAAY3C,GAAQ,IAAD,EAGjB,GAHiB,qBACjB,cAAMA,IAmGRK,YAAc,SAACoB,EAAGmB,GAChB,IAAMC,EAAW,CACfC,OAAQrB,EAAEsB,cAAc5C,GACxByC,SAAUA,GAEZI,aAAaC,QAAQ,WAAYC,KAAKC,UAAUN,KAzG/B,EA4GnBJ,WAAa,SAAChB,GACZA,EAAEZ,kBA7Ge,EAgHnB6B,OAAS,SAACjB,EAAG2B,GACX,IAAMC,EAAcL,aAAaM,QAAQ,YACnCC,EAAmBP,aAAaM,QAAQ,aACxCE,EAAaN,KAAKO,MAAMF,GACxBG,EAAiBR,KAAKO,MAAMJ,GAE5BM,EAAaH,EAAWE,EAAed,UAAUT,MACjDyB,EAAWD,EAAWE,MAC1B,SAACxB,GAAD,OAAUA,EAAKjC,QAAUsD,EAAeZ,UAEpCgB,EAAcH,EAAWI,WAC7B,SAAC1B,GAAD,OAAUA,EAAKjC,QAAUsD,EAAeZ,UAE1CU,EAAWE,EAAed,UAAUT,MAAM6B,OAAOF,EAAa,GAC9DN,EAAWJ,GAASjB,MAAM8B,KAA1B,eACKL,EADL,CAEExC,WAAY8C,SAASd,MAIvB,EAAK7B,SAAS,CACZ4C,UAAWX,IAEbR,aAAaC,QAAQ,YAAaC,KAAKC,UAAUK,KApI7CR,aAAaM,QAAQ,aAAc,CACrC,IAAMC,EAAmBP,aAAaM,QAAQ,aACxCE,EAAaN,KAAKO,MAAMF,GAC9B,EAAK7C,MAAQ,CAAEyD,UAAWX,GAC1BY,QAAQC,IAAI,OAAQ,EAAK3D,MAAMyD,UAAU,SAEzC,EAAKzD,MAAQ,CACXyD,UAAW,CACT,CACE3B,MAAO,OACPrC,GAAI,EACJgC,MAAO,CACL,CACE5B,UAAW,QACXC,gBAAiB,0BACjBY,WAAY,EACZhB,OAAQ,GAEV,CACEG,UAAW,QACXC,gBAAiB,0BACjBY,WAAY,EACZhB,OAAQ,KAId,CACEoC,MAAO,cACPrC,GAAI,EACJgC,MAAO,CACL,CACE5B,UAAW,QACXC,gBAAiB,0BACjBY,WAAY,EACZhB,OAAQ,GAEV,CACEG,UAAW,QACXC,gBAAiB,0BACjBY,WAAY,EACZhB,OAAQ,KAId,CACEoC,MAAO,OACPrC,GAAI,EACJgC,MAAO,CACL,CACE5B,UAAW,QACXC,gBAAiB,0BACjBY,WAAY,EACZhB,OAAQ,GAEV,CACEG,UAAW,QACXC,gBAAiB,0BACjBY,WAAY,EACZhB,OAAQ,OA7DH,OAqEjB,SAAyBkE,GACvB,IAAMH,EAAYjB,KAAKO,MAAMT,aAAaM,QAAQ,cAClDiB,OAAOC,KAAKF,GAAkBG,SAAQ,SAAClC,GACrC4B,EAAU5B,GAAO+B,EAAiB/B,GAClC6B,QAAQC,IAAI9B,MAGhBmC,CAAgB,EAAKhE,MAAMyD,WAC3BnB,aAAaC,QAAQ,YAAaC,KAAKC,UAAU,EAAKzC,MAAMyD,YA7E3C,E,wDAiFP5D,EAAWC,EAAiBY,GACtC,IAAMmC,EAAmBP,aAAaM,QAAQ,aACxCE,EAAaN,KAAKO,MAAMF,GAExBoB,EAAc,CAClBpE,YACAC,kBACAY,aACAhB,QAAQ,IAAIwE,MAAOC,WAErBrB,EAAWpC,GAAYe,MAAM8B,KAAKU,GAElC5D,KAAKQ,SAAS,CACZ4C,UAAWX,IAEbR,aAAaC,QAAQ,YAAaC,KAAKC,UAAUK,M,+BA0CzC,IAAD,OACDW,EAAYpD,KAAKL,MAAMyD,UAAU/B,KAAI,SAAC0C,EAAUxC,GAAX,OACzC,wBAAIrC,UAAU,eAAesC,IAAKD,GAChC,kBAAC,EAAD,iBACMwC,EADN,CAEExD,MAAO,SAACf,EAAWC,EAAiBY,GAA7B,OACL,EAAK2D,YAAYxE,EAAWC,EAAiBY,IAE/Cf,YAAa,SAACoB,EAAGmB,GAAJ,OAAiB,EAAKvC,YAAYoB,EAAjB,UAAuBqD,EAAS3E,MAC9DsC,WAAY,SAAChB,GAAD,OAAO,EAAKgB,WAAWhB,IACnCiB,OAAQ,SAACjB,EAAG2B,GACV,EAAKV,OAAOjB,EAAZ,UAAkBqD,EAAS3E,aAKnC,OACE,yBAAKF,UAAU,SACb,wBAAIA,UAAU,SAASkE,Q,GA7JIlC,a,MCSpB+C,MATf,WACE,OACE,yBAAK/E,UAAU,iBACb,6CACA,kBAAC,EAAD,QCIcgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.2c2fad39.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./TaskItems.css\";\nexport default function TaskCard(props) {\n  return (\n    <div\n      className=\"task-card\"\n      draggable=\"true\"\n      id={[props.timeId]}\n      onDragStart={props.onDragStart}\n    >\n      <span className=\"deleteButton\">\n        {\" \"}\n        <i class=\"fas fa-pencil-alt\"></i> ‚úñÔ∏è{\" \"}\n      </span>\n      <p className=\"taskCardTitle\">\n        {props.taskTitle}:{/* <span>üïö</span>  */}\n      </p>\n      <p> {props.taskDescription} </p>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./AddNewTaskForm.css\";\nexport default class AddNewTaskForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing: false,\n    };\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const newCard = this.textInput.value.trim();\n    const newCardArray = newCard.split(\",\");\n    const taskTitle = newCardArray[0];\n    const taskDescription = newCardArray[1];\n    const listNumber = this.props.formNum;\n    if (taskDescription && this.props.onAdd) {\n      this.props.onAdd(taskTitle, taskDescription, listNumber);\n    }\n    this.textInput.value = \"\";\n  }\n\n  setEditing(editing) {\n    this.setState({\n      editing,\n    });\n  }\n\n  render() {\n    if (!this.state.editing) {\n      return (\n        <div className=\"open-add-button\" onClick={() => this.setEditing(true)}>\n          <div className=\"addNewCard\">+</div>\n        </div>\n      );\n    }\n    return (\n      <form className=\"card add-task-form\" onSubmit={(e) => this.onSubmit(e)}>\n        <input\n          type=\"text\"\n          className=\"task-input\"\n          ref={(input) => (this.textInput = input)}\n          aria-label=\"Add a task\"\n          placeholder=\"add task title, description\"\n        />\n        <div>\n          <button className=\"button add-button\">Add Task</button>\n          <button\n            className=\"button cancel-button\"\n            onClick={() => this.setEditing(false)}\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport TaskCard from \"./TaskCard\";\nimport AddNewTaskForm from \"./AddNewTaskForm.js\";\nimport \"./TaskItems.css\";\n\nexport default class TaskItems extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const cards = this.props.cards.map((card, index) => {\n      return (\n        <li key={index}>\n          <TaskCard {...card} onDragStart={this.props.onDragStart} />\n        </li>\n      );\n    });\n\n    return (\n      <div>\n        <h2 className={`title-header titleHeader-${this.props.id}`}>\n          {this.props.title}\n        </h2>\n        <ul\n          className=\"taskCards\"\n          onDragOver={this.props.onDragOver}\n          onDrop={this.props.onDrop}\n        >\n          {cards}\n          <li>\n            <AddNewTaskForm formNum={this.props.id} onAdd={this.props.onAdd} />\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./KanbanBoard.css\";\nimport TaskItems from \"./TaskItems\";\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    if (localStorage.getItem(\"taskItems\")) {\n      const localStorageList = localStorage.getItem(\"taskItems\");\n      const parsedList = JSON.parse(localStorageList);\n      this.state = { taskItems: parsedList };\n      console.log(\"LS..\", this.state.taskItems[0]);\n    } else {\n      this.state = {\n        taskItems: [\n          {\n            title: \"Todo\",\n            id: 0,\n            cards: [\n              {\n                taskTitle: \"title\",\n                taskDescription: \"task card 1 description\",\n                listNumber: 0,\n                timeId: 1,\n              },\n              {\n                taskTitle: \"title\",\n                taskDescription: \"task card 2 description\",\n                listNumber: 0,\n                timeId: 1,\n              },\n            ],\n          },\n          {\n            title: \"In Progress\",\n            id: 1,\n            cards: [\n              {\n                taskTitle: \"title\",\n                taskDescription: \"task card 3 description\",\n                listNumber: 1,\n                timeId: 3,\n              },\n              {\n                taskTitle: \"title\",\n                taskDescription: \"task card 4 description\",\n                listNumber: 1,\n                timeId: 4,\n              },\n            ],\n          },\n          {\n            title: \"Done\",\n            id: 2,\n            cards: [\n              {\n                taskTitle: \"title\",\n                taskDescription: \"task card 5 description\",\n                listNumber: 2,\n                timeId: 5,\n              },\n              {\n                taskTitle: \"title\",\n                taskDescription: \"task card 6 description\",\n                listNumber: 2,\n                timeId: 6,\n              },\n            ],\n          },\n        ],\n      };\n    }\n    //Function to update taskItems in localStorage\n    function updateTaskItems(updatedTaskItems) {\n      const taskItems = JSON.parse(localStorage.getItem(\"taskItems\"));\n      Object.keys(updatedTaskItems).forEach((key) => {\n        taskItems[key] = updatedTaskItems[key];\n        console.log(key);\n      });\n    }\n    updateTaskItems(this.state.taskItems);\n    localStorage.setItem(\"taskItems\", JSON.stringify(this.state.taskItems));\n  }\n\n  //Adding new taskcards to the taskItems List\n  addTaskCard(taskTitle, taskDescription, listNumber) {\n    const localStorageList = localStorage.getItem(\"taskItems\");\n    const parsedList = JSON.parse(localStorageList);\n\n    const newTaskCard = {\n      taskTitle,\n      taskDescription,\n      listNumber,\n      timeId: new Date().valueOf(),\n    };\n    parsedList[listNumber].cards.push(newTaskCard);\n\n    this.setState({\n      taskItems: parsedList,\n    });\n    localStorage.setItem(\"taskItems\", JSON.stringify(parsedList));\n  }\n\n  // Getting a listNumber of OnDraging a Taskcard\n  onDragStart = (e, fromList) => {\n    const dragInfo = {\n      taskId: e.currentTarget.id,\n      fromList: fromList,\n    };\n    localStorage.setItem(\"dragInfo\", JSON.stringify(dragInfo));\n  };\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  onDrop = (e, listNum) => {\n    const droppedTask = localStorage.getItem(\"dragInfo\");\n    const localStorageList = localStorage.getItem(\"taskItems\");\n    const parsedList = JSON.parse(localStorageList);\n    const parsedDragInfo = JSON.parse(droppedTask);\n\n    const cardsArray = parsedList[parsedDragInfo.fromList].cards;\n    const taskCard = cardsArray.find(\n      (card) => card.timeId == parsedDragInfo.taskId\n    );\n    const indexOfCard = cardsArray.findIndex(\n      (card) => card.timeId == parsedDragInfo.taskId\n    );\n    parsedList[parsedDragInfo.fromList].cards.splice(indexOfCard, 1);\n    parsedList[listNum].cards.push({\n      ...taskCard,\n      listNumber: parseInt(listNum),\n    });\n\n    //sync the state and localStorage\n    this.setState({\n      taskItems: parsedList,\n    });\n    localStorage.setItem(\"taskItems\", JSON.stringify(parsedList));\n  };\n\n  render() {\n    const taskItems = this.state.taskItems.map((taskItem, index) => (\n      <li className=\"list-wrapper\" key={index}>\n        <TaskItems\n          {...taskItem}\n          onAdd={(taskTitle, taskDescription, listNumber) =>\n            this.addTaskCard(taskTitle, taskDescription, listNumber)\n          }\n          onDragStart={(e, fromList) => this.onDragStart(e, `${taskItem.id}`)}\n          onDragOver={(e) => this.onDragOver(e)}\n          onDrop={(e, listNum) => {\n            this.onDrop(e, `${taskItem.id}`);\n          }}\n        />\n      </li>\n    ));\n    return (\n      <div className=\"board\">\n        <ul className=\"lists\">{taskItems}</ul>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Board from \"./components/KanbanBoard\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App mainBoard\">\n      <h1> Kanban Board</h1>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWAaz\nserviceWorker.unregister();\n"],"sourceRoot":""}